name: 'Hashnode Blog Manager'
description: 'Manage Hashnode blog posts using GitHub Actions'
inputs:
  blog_path:
    description: 'Path to the blogs directory'
    required: true
  hashnode_access_token:
    description: 'Hashnode access token to authenticate API requests'
    required: true
  publication_id:
    description: 'Publication ID to publish the blog posts'
    required: true
  github_api_token:
    description: 'GitHub API token to fetch the public key'
    required: true
  blog_ids:
    description: 'blog ids secret'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Install jq
      run: sudo apt-get install jq
      shell: bash

    - name: Fetch public key
      id: fetch_key
      run: |
        RESPONSE=$(curl -L \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ inputs.github_api_token }}" \
          -H "X-GitHub-Api-Version:  2022-11-28" \
          https://api.github.com/repos/${{ github.repository }}/actions/secrets/public-key)
        echo "$RESPONSE"
        KEY=$(echo "$RESPONSE" | jq -r '.key')
        echo "PUBLIC_KEY=$KEY" >> $GITHUB_ENV
      shell: bash

    - name: Set Environment Variable
      run: |
        echo "HASHNODE_ACCESS_TOKEN=${{ inputs.hashnode_access_token }}" >> $GITHUB_ENV
        echo "PUBLICATION_ID=${{ inputs.publication_id }}" >> $GITHUB_ENV
        echo "GITHUB_API_TOKEN=${{ inputs.github_api_token }}" >> $GITHUB_ENV
        echo "GITHUB_REPOSITORY=${{ github.repository }}" >> $GITHUB_ENV
        echo "BLOG_IDS=${{ inputs.blog_ids }}" >> $GITHUB_ENV
      shell: bash

    - name: Checkout triggering repository
      uses: actions/checkout@v4
      with:
        path: 'triggering-repo'
        fetch-depth: 0
    
    - name: Checkout the repository
      uses: actions/checkout@v4
      with:
        repository: Mukund-Tandon/Hashnode-Blog-Manger
        path: 'action-repo'
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
        pip install requests==2.31.0
      shell: bash

    - name: Process blog changes
      run: |
        echo " 000 - $TEST_VAT"
        ls -la
        cd triggering-repo
        ls -la
        changed_files=$(git diff-tree --no-commit-id --name-only -r origin/main | grep "^${{ inputs.blog_path }}")
        if [[ -z "$changed_files" ]]; then
        echo "No changed files found in the specified directory."
        else
          IFS=$'\n' 
          for folder in $(echo "$changed_files" | xargs -n1 dirname | sort -u); do
            echo "Processing files in folder: $folder"
            files_in_folder=$(echo "$changed_files" | grep "^$folder")
            echo "Files in folder: $files_in_folder"
            
            # Pass files_in_folder to your Python script
            echo "$files_in_folder" | python ../action-repo/scripts/main.py
          done
        fi
      shell: bash




    